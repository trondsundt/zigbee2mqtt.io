"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[33178],{2232:(e,t,a)=>{a.r(t),a.d(t,{data:()=>d});const d={key:"v-b1787d1a",path:"/devices/DTB190502A1.html",title:"databyte.ch DTB190502A1 control via MQTT",lang:"en-US",frontmatter:{title:"databyte.ch DTB190502A1 control via MQTT",description:"Integrate your databyte.ch DTB190502A1 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor's bridge or gateway.",addedAt:"2019-09-08T21:16:00.000Z",pageClass:"device-page"},excerpt:"",headers:[{level:2,title:"Notes",slug:"notes",children:[{level:3,title:"Link",slug:"link",children:[]}]},{level:2,title:"Exposes",slug:"exposes",children:[{level:3,title:"Led_state (binary)",slug:"led-state-binary",children:[]},{level:3,title:"Key_state (enum)",slug:"key-state-enum",children:[]},{level:3,title:"Linkquality (numeric)",slug:"linkquality-numeric",children:[]}]}],filePathRelative:"devices/DTB190502A1.md",git:{updatedTime:1666800734e3}}},94017:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const d=(0,a(66252).uE)('<h1 id="databyte-ch-dtb190502a1" tabindex="-1"><a class="header-anchor" href="#databyte-ch-dtb190502a1" aria-hidden="true">#</a> databyte.ch DTB190502A1</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Model</td><td>DTB190502A1</td></tr><tr><td>Vendor</td><td>databyte.ch</td></tr><tr><td>Description</td><td>CC2530 based IO Board</td></tr><tr><td>Exposes</td><td>led_state, key_state, linkquality</td></tr><tr><td>Picture</td><td><img src="https://www.zigbee2mqtt.io/images/devices/DTB190502A1.jpg" alt="databyte.ch DTB190502A1"></td></tr></tbody></table><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link" aria-hidden="true">#</a> Link</h3><p>More information about this devices can be found here: https://databyte.ch/project/zigbee-erstes-board-dtb190502a</p><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes" aria-hidden="true">#</a> Exposes</h2><h3 id="led-state-binary" tabindex="-1"><a class="header-anchor" href="#led-state-binary" aria-hidden="true">#</a> Led_state (binary)</h3><p>Value can be found in the published state on the <code>led_state</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>ON</code> led_state is ON, if <code>OFF</code> OFF.</p><h3 id="key-state-enum" tabindex="-1"><a class="header-anchor" href="#key-state-enum" aria-hidden="true">#</a> Key_state (enum)</h3><p>Value can be found in the published state on the <code>key_state</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>KEY_SYS</code>, <code>KEY_UP</code>, <code>KEY_DOWN</code>, <code>KEY_NONE</code>.</p><h3 id="linkquality-numeric" tabindex="-1"><a class="header-anchor" href="#linkquality-numeric" aria-hidden="true">#</a> Linkquality (numeric)</h3><p>Link quality (signal strength). Value can be found in the published state on the <code>linkquality</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>255</code>. The unit of this value is <code>lqi</code>.</p>',12),i={},r=(0,a(83744).Z)(i,[["render",function(e,t){return d}]])},83744:(e,t)=>{t.Z=(e,t)=>{for(const[a,d]of t)e[a]=d;return e}}}]);